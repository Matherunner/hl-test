#include <QFileDialog>
#include <QMenuBar>
#include <QMessageBox>
#include <QStatusBar>
#include <QHeaderView>
#include "qcreadwin.h"
#include "logtablemodel.h"

static const QString WIN_NAME = "Qconsole Reader";

QCReadWin::QCReadWin()
{
    resize(1000, 600);
    setWindowTitle(WIN_NAME);

    logTableView = new LogTableView(this);
    logTableView->setModel(new LogTableModel(logTableView));
    connect(logTableView->verticalHeader(), SIGNAL(sectionClicked(int)), this,
            SLOT(showExtraLines(int)));
    setCentralWidget(logTableView);

    extraLinesDock = new QDockWidget("Extra lines", this);
    extraLinesDock->setFloating(false);
    extraLinesDock->hide();
    addDockWidget(Qt::BottomDockWidgetArea, extraLinesDock);

    extraLinesEdit = new QPlainTextEdit(extraLinesDock);
    extraLinesEdit->setReadOnly(true);
    extraLinesDock->setWidget(extraLinesEdit);

    QMenu *menuFile = menuBar()->addMenu("&File");
    menuFile->addAction("&Open log...", this, SLOT(openLogFile()),
                        QKeySequence("Ctrl+O"));
    menuFile->addAction("&Reload log", this, SLOT(reloadLogFile()),
                        QKeySequence("Ctrl+R"));
    menuFile->addAction("&Quit", this, SLOT(close()), QKeySequence("Ctrl+Q"));

    QMenu *menuView = menuBar()->addMenu("&View");
    menuView->addAction(extraLinesDock->toggleViewAction());

    QMenu *menuGo = menuBar()->addMenu("&Go");
    menuGo->addAction("&Next different", this, SLOT(findNextDiff()),
                      QKeySequence("]"));
    menuGo->addAction("&Prev different", this, SLOT(findPrevDiff()),
                      QKeySequence("["));

    QMenu *menuHelp = menuBar()->addMenu("&Help");
    menuHelp->addAction("&About...", this, SLOT(showAbout()));

    statusBar();
}

void QCReadWin::findNextDiff()
{
    logTableView->setIndexToDiff(true);
}

void QCReadWin::findPrevDiff()
{
    logTableView->setIndexToDiff(false);
}

void QCReadWin::openLogFile()
{
    logFileName = QFileDialog::getOpenFileName(
        this, "Open Log", "", "Log files (*.log);;All files (*.*)");
    logTableView->setFocus(Qt::OtherFocusReason);
    reloadLogFile();
}

void QCReadWin::reloadLogFile()
{
    if (logFileName.isNull())
        return;
    logTableView->model()->clearAllRows();
    extraLinesEdit->clear();
    if (!logTableView->model()->parseLogFile(logFileName))
        QMessageBox::warning(this, "Error", "Failed to parse.");
}

void QCReadWin::showAbout()
{
    QMessageBox::information(this, "About", R"(A basic reader for qconsole.log generated by TasTools mod.

Written by Matherunner, 2014. You can modify the hell out of this application to add new functionalities.)");
}

void QCReadWin::showExtraLines(int section)
{
    QString extraLines = logTableView->model()->headerData(
        section, Qt::Vertical, Qt::UserRole).toString();
    extraLinesEdit->setPlainText(extraLines);
}
